---
- name: Install dependencies
  apt:
    name: [make, build-essential, libssl-dev, zlib1g-dev, libbz2-dev, libreadline-dev, libsqlite3-dev, wget, curl, llvm, libncurses5-dev, xz-utils, tk-dev, libxml2-dev, libxmlsec1-dev, libffi-dev, liblzma-dev]

- block:
  - name: Make sure users home dir exists
    file:
      state: directory
      dest: "/home/{{ pyenv.user }}"
      owner: "{{ pyenv.user }}"
  
  - name: Create directory for virtualenv
    file:
      state: directory
      recurse: yes
      owner: "{{ pyenv.user }}"
      path: "{{ pyenv.dir }}"
  
  - name: Install pyenv using git
    git:
      repo: "https://github.com/pyenv/pyenv.git"
      dest: "~/.pyenv/"
      force: yes
  
  - name: Install pyenv-virtualenv using git
    git:
      repo: "https://github.com/pyenv/pyenv-virtualenv.git"
      dest: "~/.pyenv/plugins/pyenv-virtualenv"
 
  - name: Add pyenv to the load path
    blockinfile:
      marker: '# {mark} Ansible managed: pyenv role'
      path: "~/.zshrc"
      create: yes
      block: |
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        source ~/.zsh_pyenv 
  
  - name: Add pyenv init to zsh_pyenv (to enable shims and autocompletion); add pyenv virtualenv-init to enable auto-activation of virtualenvs
    blockinfile:
      marker: '# {mark} Ansible managed: pyenv role'
      path: "~/.zsh_pyenv"
      create: yes
      block: |
        eval "$(pyenv init -)"
        eval "$(pyenv virtualenv-init -)"

  - name: Check if python version already installed
    shell: ls -l ~/.pyenv/versions | grep -w {{ pyenv.version }}
    register: python_version_grep
    failed_when: false
    changed_when: false

  - name: Install required python version
    shell: ~/.pyenv/bin/pyenv install {{ pyenv.version }}
    when: python_version_grep.stdout == ''

  - name: Check if virtualenv with that name already exists
    shell: ~/.pyenv/bin/pyenv versions |grep -w {{ pyenv.env_name }}
    register: python_name_grep
    failed_when: false
    changed_when: false

  - name: Create virtualenv for python
    shell: |
      ~/.pyenv/bin/pyenv virtualenv {{ pyenv.version }} {{ pyenv.env_name }}
    when: python_name_grep.stdout == ''

  - name: Check if requested virtualenv in dir already exists
    shell: |
      cd {{ pyenv.dir }}
      ~/.pyenv/bin/pyenv local |grep -w {{ pyenv.env_name }}
    register: python_dir_grep
    failed_when: false
    changed_when: false

  - name: Create local virtualenv
    shell: |
      cd {{ pyenv.dir }}
      ~/.pyenv/bin/pyenv local {{ pyenv.env_name }}
    when: python_dir_grep.stdout == ''

  become_user: '{{ pyenv.user }}'
